{"ast":null,"code":"var _jsxFileName = \"D:\\\\react\\\\lesson13_side_effect_using_useEfect\\\\src\\\\components\\\\Login\\\\Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Card from '../UI/Card/Card';\nimport classes from './Login.module.css';\nimport Button from '../UI/Button/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Login = props => {\n  _s();\n\n  const [enteredEmail, setEnteredEmail] = useState(''); //состояние для ввода данных почты, так как инпут принимает строчное значение по дефолту состояние пустая строка\n\n  const [emailIsValid, setEmailIsValid] = useState(false); // проверка на валидность ввода данных почты, принимает булевое значение, по дефолту ложь\n\n  const [enteredPassword, setEnteredPassword] = useState(''); // состояние для ввода данных пароля\n\n  const [passwordIsValid, setPasswordIsValid] = useState(false); // проверка на валидность ввода данных пароля, принимает булевое значение, по дефолту ложь\n\n  const [formIsValid, setFormIsValid] = useState(false); // проверка на валидность формы, заполненна ли форма или нет, если форма пустая: значение ложь, если заполнен то истина.\n\n  useEffect(() => {\n    //debouncing\n    console.log('Valid');\n    const identifiyer = setTimeout(() => {\n      setFormIsValid(enteredEmail.includes('@') && enteredPassword.trim().length > 6);\n    }, 2500); // clean up function with debouncing+++\n\n    return () => {\n      console.log('clean up');\n      clearTimeout(identifiyer);\n    };\n  }, [setFormIsValid, enteredEmail, enteredPassword]);\n\n  const emailChangeHandler = event => {\n    // функция обработчик для  события инптута Onchange email\n    setEnteredEmail(event.target.value); // функция хука useState для обновления состояиние которое принимает значение с ввода(input) почты\n    // и сохраняет в константу enteredEmail\n    // setFormIsValid( // вызываем функцию на валидность формы\n    //   event.target.value.includes('@') && enteredPassword.trim().length > 6    // берем значение с инпута email и проверяем\n    // включает ли он собачку\n    // );                                                                         // && и если значения с инпута password больше 6 и нет пробелов(trim()), то состояние формы меняется на true\n  };\n\n  const passwordChangeHandler = event => {\n    // функция обработчик для события инпута OnChange password\n    setEnteredPassword(event.target.value); // функция хука useState для обновления состояиние которое принимает значение с ввода пароля\n    // и сохраняет в константу enteredPassword\n    // setFormIsValid(\n    //   event.target.value.trim().length > 6 && enteredEmail.includes('@')   // берем значение с инпута password и проверяем\n    // если значение с инпута password больше 6 и нет пробелов(trim())\n    // );                                                                     // && и включает ли значение и инпута mail собачку(то состояние формы меняется на true)\n  };\n\n  const validateEmailHandler = () => {\n    // функция обработчик для события интпута OnBlur email\n    setEmailIsValid(enteredEmail.includes('@')); // функция хука useState которая проверяет если значение ввода почты влключает собачку то возвращает true\n  }; // тость проверяет введен ли email коректно, и если нет показывает ошибку\n\n\n  const validatePasswordHandler = () => {\n    // функция обработчик для события инпута OnBlur password\n    setPasswordIsValid(enteredPassword.trim().length > 6); //функция которая проверяет если длинна строки знаечение инпута ввода пароля без пробелов больше 6, то возвращает true\n  };\n\n  const submitHandler = event => {\n    event.preventDefault(); // отменяет деволтное событие формы если не отменить форма будет стразу отправляться\n\n    props.onLogin(enteredEmail, enteredPassword);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.login,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${emailIsValid === false ? classes.invalid : '' // если emailIsValid равен false то примени стили класса Invalid\n        }`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"E-Mail\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"email\",\n          value: enteredEmail,\n          onChange: emailChangeHandler // event OnChange\n          ,\n          onBlur: validateEmailHandler // событие OnBlur (потеря фокуса, что означает что данные уже введены) принимает значение true или false.\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${passwordIsValid === false ? classes.invalid : '' // если passwordIsValid равен false то примени стили класса invalid\n        }`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\",\n          value: enteredPassword,\n          onChange: passwordChangeHandler,\n          onBlur: validatePasswordHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          className: classes.btn,\n          disabled: !formIsValid // кнопка сработает только тогда когда состояние формы будет true \n          ,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Login, \"XbLDvmQ29tY4uFXjH0o6Wi9jbLU=\");\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["D:/react/lesson13_side_effect_using_useEfect/src/components/Login/Login.js"],"names":["React","useEffect","useState","Card","classes","Button","Login","props","enteredEmail","setEnteredEmail","emailIsValid","setEmailIsValid","enteredPassword","setEnteredPassword","passwordIsValid","setPasswordIsValid","formIsValid","setFormIsValid","console","log","identifiyer","setTimeout","includes","trim","length","clearTimeout","emailChangeHandler","event","target","value","passwordChangeHandler","validateEmailHandler","validatePasswordHandler","submitHandler","preventDefault","onLogin","login","control","invalid","actions","btn"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\n\nimport Card from '../UI/Card/Card'\nimport classes from './Login.module.css'\nimport Button from '../UI/Button/Button'\n\nconst Login = (props) => {\n\tconst [enteredEmail, setEnteredEmail] = useState('') //состояние для ввода данных почты, так как инпут принимает строчное значение по дефолту состояние пустая строка\n\tconst [emailIsValid, setEmailIsValid] = useState(false) // проверка на валидность ввода данных почты, принимает булевое значение, по дефолту ложь\n\tconst [enteredPassword, setEnteredPassword] = useState('') // состояние для ввода данных пароля\n\tconst [passwordIsValid, setPasswordIsValid] = useState(false) // проверка на валидность ввода данных пароля, принимает булевое значение, по дефолту ложь\n\tconst [formIsValid, setFormIsValid] = useState(false) // проверка на валидность формы, заполненна ли форма или нет, если форма пустая: значение ложь, если заполнен то истина.\n\n\tuseEffect(() => {\n\t\t//debouncing\n\t\tconsole.log('Valid')\n\t\tconst identifiyer = setTimeout(() => {\n\t\t\tsetFormIsValid(\n\t\t\t\tenteredEmail.includes('@') && enteredPassword.trim().length > 6,\n\t\t\t)\n\t\t}, 2500)\n\t\t// clean up function with debouncing+++\n\t\treturn () => {\n\t\t\tconsole.log('clean up')\n\t\t\tclearTimeout(identifiyer)\n\t\t}\n\t}, [setFormIsValid, enteredEmail, enteredPassword])\n\n\tconst emailChangeHandler = (event) => {\n\t\t// функция обработчик для  события инптута Onchange email\n\t\tsetEnteredEmail(event.target.value) // функция хука useState для обновления состояиние которое принимает значение с ввода(input) почты\n\t\t// и сохраняет в константу enteredEmail\n\t\t// setFormIsValid( // вызываем функцию на валидность формы\n\t\t//   event.target.value.includes('@') && enteredPassword.trim().length > 6    // берем значение с инпута email и проверяем\n\t\t// включает ли он собачку\n\t\t// );                                                                         // && и если значения с инпута password больше 6 и нет пробелов(trim()), то состояние формы меняется на true\n\t}\n\n\tconst passwordChangeHandler = (event) => {\n\t\t// функция обработчик для события инпута OnChange password\n\t\tsetEnteredPassword(event.target.value) // функция хука useState для обновления состояиние которое принимает значение с ввода пароля\n\t\t// и сохраняет в константу enteredPassword\n\t\t// setFormIsValid(\n\t\t//   event.target.value.trim().length > 6 && enteredEmail.includes('@')   // берем значение с инпута password и проверяем\n\t\t// если значение с инпута password больше 6 и нет пробелов(trim())\n\t\t// );                                                                     // && и включает ли значение и инпута mail собачку(то состояние формы меняется на true)\n\t}\n\n\tconst validateEmailHandler = () => {\n\t\t// функция обработчик для события интпута OnBlur email\n\t\tsetEmailIsValid(enteredEmail.includes('@')) // функция хука useState которая проверяет если значение ввода почты влключает собачку то возвращает true\n\t} // тость проверяет введен ли email коректно, и если нет показывает ошибку\n\n\tconst validatePasswordHandler = () => {\n\t\t// функция обработчик для события инпута OnBlur password\n\t\tsetPasswordIsValid(enteredPassword.trim().length > 6) //функция которая проверяет если длинна строки знаечение инпута ввода пароля без пробелов больше 6, то возвращает true\n\t}\n\n\tconst submitHandler = (event) => {\n\t\tevent.preventDefault() // отменяет деволтное событие формы если не отменить форма будет стразу отправляться\n\t\tprops.onLogin(enteredEmail, enteredPassword)\n\t}\n\n\treturn (\n\t\t<Card className={classes.login}>\n\t\t\t<form onSubmit={submitHandler}>\n\t\t\t\t<div\n\t\t\t\t\tclassName={`${classes.control} ${\n\t\t\t\t\t\temailIsValid === false ? classes.invalid : '' // если emailIsValid равен false то примени стили класса Invalid\n\t\t\t\t\t}`}\n\t\t\t\t>\n\t\t\t\t\t<label htmlFor='email'>E-Mail</label>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype='email'\n\t\t\t\t\t\tid='email'\n\t\t\t\t\t\tvalue={enteredEmail}\n\t\t\t\t\t\tonChange={emailChangeHandler} // event OnChange\n\t\t\t\t\t\tonBlur={validateEmailHandler} // событие OnBlur (потеря фокуса, что означает что данные уже введены) принимает значение true или false.\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div\n\t\t\t\t\tclassName={`${classes.control} ${\n\t\t\t\t\t\tpasswordIsValid === false ? classes.invalid : '' // если passwordIsValid равен false то примени стили класса invalid\n\t\t\t\t\t}`}\n\t\t\t\t>\n\t\t\t\t\t<label htmlFor='password'>Password</label>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype='password'\n\t\t\t\t\t\tid='password'\n\t\t\t\t\t\tvalue={enteredPassword}\n\t\t\t\t\t\tonChange={passwordChangeHandler}\n\t\t\t\t\t\tonBlur={validatePasswordHandler}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div className={classes.actions}>\n\t\t\t\t\t<Button\n\t\t\t\t\t\ttype='submit'\n\t\t\t\t\t\tclassName={classes.btn}\n\t\t\t\t\t\tdisabled={!formIsValid} // кнопка сработает только тогда когда состояние формы будет true \n\t\t\t\t\t>\n\t\t\t\t\t\tLogin\n\t\t\t\t\t</Button>\n\t\t\t\t</div>\n\t\t\t</form>\n\t\t</Card>\n\t)\n}\n\nexport default Login\n"]},"metadata":{},"sourceType":"module"}