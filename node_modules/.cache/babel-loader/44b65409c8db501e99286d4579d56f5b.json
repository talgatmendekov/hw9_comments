{"ast":null,"code":"var _jsxFileName = \"D:\\\\react\\\\lesson13_side_effect_using_useEfect\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Login from './components/Login/Login';\nimport Home from './components/Home/Home';\nimport MainHeader from './components/MainHeader/MainHeader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [isLoggedIn, setIsLoggedIn] = useState(false); // состояние которое проверяет пользователь залогинелся или нет\n\n  useEffect(() => {\n    const storedUserLoggedinfo = localStorage.getItem('key'); // внутри call back функции берем данные с localStorage методом getItem() через ключ \"key\" и сохраняем в константе storedUserLoggedinfo.\n    // Кух useEffect первым параметром принимает call back функцию где внутри этой фукнции опрабатывается Side Effect в нашем случае данные с local storage\n\n    if (storedUserLoggedinfo === '1') {\n      setIsLoggedIn(true);\n    }\n  }, []); // useEffect вторым параметром принимает пустой массив чтобы call back фунция сработала один раз и после прекратилась. И не реагировала не на один рендер.\n\n  const loginHandler = (email, password) => {\n    // обработчик состояния\n    // We should of course check email and password\n    // But it's just a dummy/ demo anyways\n    localStorage.setItem('key', '1'); // сохранили в локальное хранилище число(строку) 1\n\n    setIsLoggedIn(true); //\n  };\n\n  const logoutHandler = () => {\n    setIsLoggedIn(false);\n    localStorage.removeItem('key');\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(MainHeader, {\n      isAuthenticated: isLoggedIn,\n      onLogout: logoutHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [!isLoggedIn && /*#__PURE__*/_jsxDEV(Login, {\n        onLogin: loginHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 21\n      }, this), \"  *\", isLoggedIn && /*#__PURE__*/_jsxDEV(Home, {\n        onLogout: logoutHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 20\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 3\n  }, this);\n}\n\n_s(App, \"fKLMlyFH2GMrhNeUDpp+0z1yiCo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/react/lesson13_side_effect_using_useEfect/src/App.js"],"names":["React","useEffect","useState","Login","Home","MainHeader","App","isLoggedIn","setIsLoggedIn","storedUserLoggedinfo","localStorage","getItem","loginHandler","email","password","setItem","logoutHandler","removeItem"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,UAAP,MAAuB,oCAAvB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACd,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BN,QAAQ,CAAC,KAAD,CAA5C,CADc,CACsC;;AAEpDD,EAAAA,SAAS,CAAC,MAAM;AACf,UAAMQ,oBAAoB,GAAGC,YAAY,CAACC,OAAb,CAAqB,KAArB,CAA7B,CADe,CAC0C;AACzD;;AACA,QAAIF,oBAAoB,KAAK,GAA7B,EAAkC;AACjCD,MAAAA,aAAa,CAAC,IAAD,CAAb;AACA;AACD,GANQ,EAMN,EANM,CAAT,CAHc,CASP;;AACP,QAAMI,YAAY,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACzC;AACA;AACA;AACAJ,IAAAA,YAAY,CAACK,OAAb,CAAqB,KAArB,EAA4B,GAA5B,EAJyC,CAIR;;AACjCP,IAAAA,aAAa,CAAC,IAAD,CAAb,CALyC,CAKrB;AACpB,GAND;;AAQA,QAAMQ,aAAa,GAAG,MAAM;AAC3BR,IAAAA,aAAa,CAAC,KAAD,CAAb;AACAE,IAAAA,YAAY,CAACO,UAAb,CAAwB,KAAxB;AACA,GAHD;;AAKA,sBACC,QAAC,KAAD,CAAO,QAAP;AAAA,4BACC,QAAC,UAAD;AAAY,MAAA,eAAe,EAAEV,UAA7B;AAAyC,MAAA,QAAQ,EAAES;AAAnD;AAAA;AAAA;AAAA;AAAA,YADD,eAEC;AAAA,iBACE,CAACT,UAAD,iBAAe,QAAC,KAAD;AAAO,QAAA,OAAO,EAAEK;AAAhB;AAAA;AAAA;AAAA;AAAA,cADjB,SAEEL,UAAU,iBAAI,QAAC,IAAD;AAAM,QAAA,QAAQ,EAAES;AAAhB;AAAA;AAAA;AAAA;AAAA,cAFhB;AAAA;AAAA;AAAA;AAAA;AAAA,YAFD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AASA;;GAhCQV,G;;KAAAA,G;AAkCT,eAAeA,GAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\n\nimport Login from './components/Login/Login'\nimport Home from './components/Home/Home'\nimport MainHeader from './components/MainHeader/MainHeader'\n\nfunction App() {\n\tconst [isLoggedIn, setIsLoggedIn] = useState(false) // состояние которое проверяет пользователь залогинелся или нет\n\n\tuseEffect(() => {\n\t\tconst storedUserLoggedinfo = localStorage.getItem('key') // внутри call back функции берем данные с localStorage методом getItem() через ключ \"key\" и сохраняем в константе storedUserLoggedinfo.\n\t\t// Кух useEffect первым параметром принимает call back функцию где внутри этой фукнции опрабатывается Side Effect в нашем случае данные с local storage\n\t\tif (storedUserLoggedinfo === '1') {\n\t\t\tsetIsLoggedIn(true)\n\t\t}\n\t}, []) // useEffect вторым параметром принимает пустой массив чтобы call back фунция сработала один раз и после прекратилась. И не реагировала не на один рендер.\n\tconst loginHandler = (email, password) => {\n\t\t// обработчик состояния\n\t\t// We should of course check email and password\n\t\t// But it's just a dummy/ demo anyways\n\t\tlocalStorage.setItem('key', '1') // сохранили в локальное хранилище число(строку) 1\n\t\tsetIsLoggedIn(true) //\n\t}\n\n\tconst logoutHandler = () => {\n\t\tsetIsLoggedIn(false)\n\t\tlocalStorage.removeItem('key')\n\t}\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<MainHeader isAuthenticated={isLoggedIn} onLogout={logoutHandler} /> \n\t\t\t<main>\n\t\t\t\t{!isLoggedIn && <Login onLogin={loginHandler} />}  *\n\t\t\t\t{isLoggedIn && <Home onLogout={logoutHandler} />}\n\t\t\t</main>\n\t\t</React.Fragment>\n\t)\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}