{"ast":null,"code":"var _jsxFileName = \"D:\\\\react\\\\lesson13_side_effect_using_useEfect\\\\src\\\\components\\\\Login\\\\Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Card from '../UI/Card/Card';\nimport classes from './Login.module.css';\nimport Button from '../UI/Button/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Login = props => {\n  _s();\n\n  const [enteredEmail, setEnteredEmail] = useState(''); //состояние для ввода данных почты, так как инпут принимает строчное значение по дефолту состояние пустая строка\n\n  const [emailIsValid, setEmailIsValid] = useState(false); // проверка на валидность ввода данных почты, принимает булевое значение, по дефолту ложь\n\n  const [enteredPassword, setEnteredPassword] = useState(''); // состояние для ввода данных пароля\n\n  const [passwordIsValid, setPasswordIsValid] = useState(false); // проверка на валидность ввода данных пароля, принимает булевое значение, по дефолту ложь\n\n  const [formIsValid, setFormIsValid] = useState(false); // проверка на валидность формы, заполненна ли форма или нет, если форма пустая: значение ложь, если заполнен то истина.\n\n  useEffect(() => {\n    //debouncing\n    console.log('Valid');\n    const identifiyer = setTimeout(() => {\n      setFormIsValid(enteredEmail.includes('@') && enteredPassword.trim().length > 6);\n    }, 2500); // clean up function with debouncing+++  \n\n    return () => {\n      console.log('clean up');\n      clearTimeout(identifiyer);\n    };\n  }, [setFormIsValid, enteredEmail, enteredPassword]);\n\n  const emailChangeHandler = event => {\n    // функция обработчик для  события инптута Onchange email\n    setEnteredEmail(event.target.value); // функция хука useState для обновления состояиние которое принимает значение с ввода(input) почты\n    // и сохраняет в константу enteredEmail\n    // setFormIsValid( // вызываем функцию на валидность формы\n    //   event.target.value.includes('@') && enteredPassword.trim().length > 6    // берем значение с инпута email и проверяем \n    // включает ли он собачку\n    // );                                                                         // && и если значения с инпута password больше 6 и нет пробелов(trim()), то состояние формы меняется на true\n  };\n\n  const passwordChangeHandler = event => {\n    // функция обработчик для события инпута OnChange password\n    setEnteredPassword(event.target.value); // функция хука useState для обновления состояиние которое принимает значение с ввода пароля\n    // и сохраняет в константу enteredPassword\n    // setFormIsValid(\n    //   event.target.value.trim().length > 6 && enteredEmail.includes('@')   // берем значение с инпута password и проверяем \n    // если значение с инпута password больше 6 и нет пробелов(trim())\n    // );                                                                     // && и включает ли значение и инпута mail собачку(то состояние формы меняется на true)\n  };\n\n  const validateEmailHandler = () => {\n    // функция обработчик для события интпута OnBlur email \n    setEmailIsValid(enteredEmail.includes('@')); // функция хука useState которая проверяет если значение ввода почты влключает собачку то возвращает true\n  }; // PS: если возвращается true то красный focus пропадает тоесть событие OnBlur \n\n\n  const validatePasswordHandler = () => {\n    setPasswordIsValid(enteredPassword.trim().length > 6);\n  };\n\n  const submitHandler = event => {\n    event.preventDefault(); // отменяет деволтное событие формы если не отменить форма будет стразу отправляться \n\n    props.onLogin(enteredEmail, enteredPassword);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.login,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${emailIsValid === false ? classes.invalid : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"E-Mail\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"email\",\n          value: enteredEmail,\n          onChange: emailChangeHandler // event OnChange\n          ,\n          onBlur: validateEmailHandler // событие OnBlur принимает значение true или false. \n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${passwordIsValid === false ? classes.invalid : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\",\n          value: enteredPassword,\n          onChange: passwordChangeHandler,\n          onBlur: validatePasswordHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          className: classes.btn,\n          disabled: !formIsValid,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Login, \"XbLDvmQ29tY4uFXjH0o6Wi9jbLU=\");\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["D:/react/lesson13_side_effect_using_useEfect/src/components/Login/Login.js"],"names":["React","useEffect","useState","Card","classes","Button","Login","props","enteredEmail","setEnteredEmail","emailIsValid","setEmailIsValid","enteredPassword","setEnteredPassword","passwordIsValid","setPasswordIsValid","formIsValid","setFormIsValid","console","log","identifiyer","setTimeout","includes","trim","length","clearTimeout","emailChangeHandler","event","target","value","passwordChangeHandler","validateEmailHandler","validatePasswordHandler","submitHandler","preventDefault","onLogin","login","control","invalid","actions","btn"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport Card from '../UI/Card/Card';\nimport classes from './Login.module.css';\nimport Button from '../UI/Button/Button';\n\nconst Login = (props) => {\n  const [enteredEmail, setEnteredEmail] = useState(''); //состояние для ввода данных почты, так как инпут принимает строчное значение по дефолту состояние пустая строка\n  const [emailIsValid, setEmailIsValid] = useState(false); // проверка на валидность ввода данных почты, принимает булевое значение, по дефолту ложь\n  const [enteredPassword, setEnteredPassword] = useState(''); // состояние для ввода данных пароля\n  const [passwordIsValid, setPasswordIsValid] = useState(false); // проверка на валидность ввода данных пароля, принимает булевое значение, по дефолту ложь\n  const [formIsValid, setFormIsValid] = useState(false); // проверка на валидность формы, заполненна ли форма или нет, если форма пустая: значение ложь, если заполнен то истина.\n\nuseEffect(()=>{\n  //debouncing\n  console.log('Valid')\n  const identifiyer = setTimeout(()=>{\n    setFormIsValid(enteredEmail.includes('@') && enteredPassword.trim().length > 6)\n  }, 2500);\n// clean up function with debouncing+++  \n return () =>{\n   console.log('clean up')\n  clearTimeout(identifiyer)\n }\n}, [setFormIsValid, enteredEmail, enteredPassword]);\n\n\n  const emailChangeHandler = (event) => { // функция обработчик для  события инптута Onchange email\n    setEnteredEmail(event.target.value); // функция хука useState для обновления состояиние которое принимает значение с ввода(input) почты\n                                        // и сохраняет в константу enteredEmail\n    // setFormIsValid( // вызываем функцию на валидность формы\n    //   event.target.value.includes('@') && enteredPassword.trim().length > 6    // берем значение с инпута email и проверяем \n                                                                                  // включает ли он собачку\n    // );                                                                         // && и если значения с инпута password больше 6 и нет пробелов(trim()), то состояние формы меняется на true\n  };\n\n  const passwordChangeHandler = (event) => { // функция обработчик для события инпута OnChange password\n    setEnteredPassword(event.target.value); // функция хука useState для обновления состояиние которое принимает значение с ввода пароля\n                                            // и сохраняет в константу enteredPassword\n    // setFormIsValid(\n    //   event.target.value.trim().length > 6 && enteredEmail.includes('@')   // берем значение с инпута password и проверяем \n                                                                              // если значение с инпута password больше 6 и нет пробелов(trim())\n    // );                                                                     // && и включает ли значение и инпута mail собачку(то состояние формы меняется на true)\n    \n  };\n\n  const validateEmailHandler = () => { // функция обработчик для события интпута OnBlur email \n    setEmailIsValid(enteredEmail.includes('@')); // функция хука useState которая проверяет если значение ввода почты влключает собачку то возвращает true\n  };                                             // PS: если возвращается true то красный focus пропадает тоесть событие OnBlur \n\n  const validatePasswordHandler = () => {\n    setPasswordIsValid(enteredPassword.trim().length > 6);\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault(); // отменяет деволтное событие формы если не отменить форма будет стразу отправляться \n    props.onLogin(enteredEmail, enteredPassword); \n  };\n\n  return (\n    <Card className={classes.login}>\n      <form onSubmit={submitHandler}>\n        <div\n          className={`${classes.control} ${\n            emailIsValid === false ? classes.invalid : ''\n          }`}\n        >\n          <label htmlFor=\"email\">E-Mail</label>\n          <input\n            type=\"email\"\n            id=\"email\"\n            value={enteredEmail}\n            onChange={emailChangeHandler} // event OnChange\n            onBlur={validateEmailHandler} // событие OnBlur принимает значение true или false. \n          />\n        </div>\n        <div\n          className={`${classes.control} ${\n            passwordIsValid === false ? classes.invalid : ''\n          }`}\n        >\n          <label htmlFor=\"password\">Password</label>\n          <input\n            type=\"password\"\n            id=\"password\"\n            value={enteredPassword}\n            onChange={passwordChangeHandler}\n            onBlur={validatePasswordHandler}\n          />\n        </div>\n        <div className={classes.actions}>\n          <Button type=\"submit\" className={classes.btn} disabled={!formIsValid}>\n            Login\n          </Button>\n        </div>\n      </form>\n    </Card>\n  );\n};\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}